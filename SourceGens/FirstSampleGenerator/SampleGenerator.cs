using System;
using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace FirstSampleGenerator
{
    [Generator(LanguageNames.CSharp)]
    public partial class SampleGenerator : IIncrementalGenerator
    {
        public void Initialize(IncrementalGeneratorInitializationContext context)
        {
            // PostInitializationOutputでSourceGeneratorでしか使わない属性を出力する
            context.RegisterPostInitializationOutput(static context =>
                context.AddSource("SampleGeneratorAttribute.cs", """
namespace SourceGeneratorSample;

using System;

[AttributeUsage(AttributeTargets.Class, AllowMultiple=false, Inherited=false)]
internal sealed class GenerateToStringAttribute : Attribute
{
}
"""));

            var source = context.SyntaxProvider.ForAttributeWithMetadataName(
                "SourceGeneratorSample.GenerateToStringAttribute", // 引っかける属性のフルネーム
                static (node, token) => true, // predicate, 属性で既に絞れているので特別何かやりたいことがなければ基本true
                static (context, token) => context // GeneratorAttributeSyntaxContextにはNode, SemanticModel(Compilation), Symbolが入ってて便利
            );

            // 出力コードはちょっとごちゃつくので，別メソッドに隔離する
            context.RegisterSourceOutput(source, Emit);
        }

        private void Emit(SourceProductionContext context, GeneratorAttributeSyntaxContext source)
        {
            // classで引っかけているのでTypeSymbol/Syntaxとして使えるようにする．
            // SemanticModelがほしい場合は source.SemanticModel
            // Compilationがほしい場合は source.SemanticModel.Compilationから取得する

            var typeSymbol = (INamedTypeSymbol)source.TargetSymbol;
            var typeNode = (TypeDeclarationSyntax)source.TargetNode;

            // ToString()オーバーロードを定義済みならエラーを出す
            if (typeSymbol.GetMembers("ToString").Length != 0)
            {
                context.ReportDiagnostic(
                    Diagnostic.Create(
                        DiagnosticDescriptors.ExistsOverrideToString,
                        typeNode.Identifier.GetLocation(),
                        typeSymbol.Name
                ));
            }

            // グローバルnamespace対応
            var ns = typeSymbol.ContainingNamespace.IsGlobalNamespace
                ? ""
                : $"namespace {typeSymbol.ContainingNamespace}";

            // 出力ファイル名として使うので雑エスケープ
            var fullType = typeSymbol.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat)
                .Replace("global::", "")
                .Replace("<", "_")
                .Replace(">", "_");

            // Field / Propertyを抽出する
            var publicMembers = typeSymbol.GetMembers()
                .Where(x => x is (IFieldSymbol or IPropertySymbol)
                              and
                {
                    IsStatic: false,
                    DeclaredAccessibility: Accessibility.Public,
                    IsImplicitlyDeclared: false,
                    CanBeReferencedByName: true
                }
                      )
                .Select(x => $"{x.Name}:{{{x.Name}}}"); // MyProperty:{MyProperty}
            var toString = string.Join(", ", publicMembers);

            // C# 11のRaw String Literalを使ってText Template的な置換(便利)
            // ファイルとして書き出される時対策として <auto-generated/> を入れたり
            // nullable enableしつつ、nullable系のwarningがウザいのでdisableして回ったりなどをテンプレコードとして入れておいたりする
            var code = $$"""
// <auto generated/>
#nullable enable
#pragma warning disable CS8600
#pragma warning disable CS8601
#pragma warning disable CS8602
#pragma warning disable CS8603
#pragma warning disable CS8604

{{ns}}

partial class {{typeSymbol.Name}}
{
    public override string ToString()
    {
        return $"{{toString}}";
    }
}
""";

            context.AddSource($"{fullType}.SampleGenerator.g.cs", code);
        }

        public static class DiagnosticDescriptors
        {
            const string Category = "SampleGenerator";

            public static readonly DiagnosticDescriptor ExistsOverrideToString = new DiagnosticDescriptor(
                id: "SAMPLE001",
                title: "ToString Override",
                messageFormat: "The GenerateToString class '{0}' has To String override but it is not allowed",
                category: Category,
                defaultSeverity: DiagnosticSeverity.Error,
                isEnabledByDefault: true
            );
        }
    }
}
